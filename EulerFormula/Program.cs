using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EulerFormula
{
    class Program
    {
        static void Main(string[] args)
        {

            //double[] x_1 = { 119, -130, 149, -148, 147, -136, 116, -123, 151, -142, 125, -123, 136, -140, 134, -132, 149, -150, 147, -135, 139, -134, 114, -120, 158, -162, 151, -130, 134, -162, 158, -159, 150, -130, 139, -156, 160, -159, 116, -72, 3, -126, 139, -40, 30, -27, 16, -33, 36, -33, 44, -72, 69, -72, 73, -78, 73, -65, 71, -44, 25, -24, 27, -25, 27, -33, 9, -196, 233, -236, 246, -243, 247, -241, 242, -248, 250, -252, 253, -242, 243, -245, 250, -161, 5, -25, 22, -29, 27, -23, 23, -19, 23, -26, 24, -28, 33, -26, 32, -25, 22, -29, 29, -19, 19, -24, 30, -29, 34, -44, 17, -25, 24, -28, 28, -35, 42, -48, 48, -39, 51, -49, 67, -54, 52, -60, 55, -55, 58, -56, 63, -66, 69, -66, 65, -72, 76, -74, 84, -102, 93, -90, 101, -84, 76, -77, 93, -81, 70, -77, 89, -102, 84, -60, 52, -68, 90, -89, 64, -44, 40, -37, 21, -64, 116, -173, 203, -195, 180, -154, 134, -119, 122, -130, 125, -136, 89, -21, 17, -44, 96, -117, 122, -132, 134, -143, 151, -151, 147, -150, 155, -156, 115, -124, 168, -139, 4, -19, 73, -118, 149, -147, 148, -150, 152, -153, 151, -148, 144, -145, 148, -150, 150, -146, 143, -140, 139, -139, 135, -131, 130, -134, 137, -137, 135, -135, 135, -140, 141, -140, 135, -130, 134, -133, 133, -133, 132, -132, 130, -131, 130, -131, 131, -129, 124, -125, 126, -130, 125, -124, 122, -121, 125, -126, 127, -128, 139, -139, 143, -146, 146, -137, 118, -104, 82, -62, 44, -42, 45, -41, 39, -41, 41, -42, 42, -42, 43, -43, 43, -43, 45, -45, 45, -44, 44, -44, 44, -43, 41, -40, 40, -38, 36, -35, 33, -33, 28, -28, 26, -25, 23, -21, 20, -19, 18, -18, 18, -19, 19, -20, 20, -20, 22, -22, 22, -24, 25, -25, 26, -26 };
            double[] x_1 = {140 ,-142 ,154 ,-146 ,144 ,-152 ,146 ,-131 ,134 ,-154 ,178 ,-194 ,187 ,-175 ,185 ,-184 ,161 ,-164 ,187 ,-202 ,197 ,-191 ,189 ,-173 ,154 ,-150 ,166 ,-175 ,173 ,-177 ,191 ,-196 ,167 ,-136 ,137 ,-148 ,168 ,-194 ,194 ,-187 ,178 ,-178 ,171 ,-145 ,133 ,-137 ,145 ,-166 ,168 ,-140 ,113 ,-107 ,107 ,-106 ,112 ,-120 ,133 ,-148 ,155 ,-167 ,174 ,-165 ,152 ,-159 ,156 ,-155 ,168 ,-181 ,174 ,-158 ,133 ,-123 ,130 ,-126 ,133 ,-146 ,154 ,-168 ,167 ,-161 ,152 ,-150 ,165 ,-177 ,173 ,-165 ,163 ,-161 ,151 ,-133 ,126 ,-123 ,109 ,-103 ,117 ,-138 ,150 ,-142 ,140 ,-134 ,124 ,-131 ,139 ,-134 ,126 ,-126 ,109 ,-93 ,103 ,-112 ,112 ,-105 ,83 ,-94 ,114 ,-130 ,131 ,-124 ,116 ,-121 ,138 ,-139 ,136 ,-160 ,174 ,-150 ,113 ,-100 ,103 ,-97 ,103 ,-110 ,105 ,-107 ,141 ,-156 ,159 ,-147 ,145 ,-164 ,170 ,-166 ,158 ,-146 ,131 ,-117 ,110 ,-105 ,98 ,-103 ,114 ,-126 ,148 ,-181 ,194 ,-174 ,159 ,-159 ,168 ,-180 ,189 ,-196 ,185 ,-142 ,110 ,-112 ,107 ,-94 ,97 ,-113 ,141 ,-159 ,168 ,-167 ,166 ,-168 ,181 ,-187 ,185 ,-192 ,187 ,-168 ,145 ,-126 ,121 ,-110 ,107 ,-127 ,145 ,-179 ,206 ,-205 ,212 ,-224 ,218 ,-196 ,180 ,-181 ,188 ,-189 ,171 ,-150 ,138 ,-127 ,119 ,-121 ,132 ,-155 ,184 ,-194 ,194 ,-208 ,214 ,-208 ,214 ,-219 ,214 ,-207 ,194 ,-170 ,138 ,-110 ,103 ,-110 ,119 ,-138 ,180 ,-207 ,191 ,-174 ,177 ,-180 ,191 ,-198 ,192 ,-194 ,203 ,-198 ,177 ,-150 ,129 ,-131 ,123 ,-117 ,142 ,-186 ,210 ,-200 ,202 ,-220 ,219 ,-202 ,193 ,-192 ,203 ,-213 ,200 ,-165 ,127 ,-97 ,94 ,-117 ,134 ,-160 ,185 ,-194 ,203 ,-206 ,208 ,-211 ,215 ,-217 ,214 ,-215 ,212 ,-201 ,192 ,-178 ,154 ,-152 ,168 ,-187 ,201 ,-214 ,227 ,-222 ,215 ,-222 ,222 ,-221 ,221 ,-215 ,210 ,-210 ,207 ,-194 ,170 ,-148 ,136 ,-138 ,161 ,-198 ,219 ,-213 ,198 ,-200 ,210 ,-213 ,213 ,-207 ,193 ,-191 ,196 ,-186 ,179 ,-167 ,142 ,-141 ,171 ,-192 ,189 ,-191 ,199 ,-211 ,212 ,-198 ,196 ,-201 ,206 ,-215 ,219 ,-210 ,189 ,-155 ,121 ,-110 ,113 ,-134 ,166 ,-193 ,207 ,-208 ,213 ,-221 ,221 ,-220 ,222 ,-227 ,222 ,-210 ,207 ,-207 ,187 ,-164 ,161 ,-188 ,200 ,-203 ,211 ,-211 ,215 ,-224 ,222 ,-217 ,215 ,-212 ,205 ,-197 ,202 ,-215 ,206 ,-193 ,181 ,-181 ,188 ,-186 ,189 ,-201 ,207 ,-214 ,220 ,-215 ,214 ,-214 ,215 ,-215 ,203 ,-200 ,211 ,-213 ,196 ,-172 ,159 ,-174 ,198 ,-215 ,222 ,-215 ,210 ,-207 ,201 ,-201 ,207 ,-212 ,213 ,-208 ,197 ,-191 ,191 ,-171 ,142 ,-151 ,175 ,-191 ,200 ,-202 ,200 ,-203 ,208 ,-207 ,199 ,-194 ,201 ,-208 ,212 ,-201 ,191 ,-178 ,155 ,-133 ,131 ,-164 ,205 ,-222 ,227 ,-226 ,206 ,-192 ,205 ,-217 ,218 ,-207 ,198 ,-206 ,215 ,-201 ,186 ,-177 ,166 ,-147 ,156 ,-178 ,181 ,-182 ,189 ,-203 ,212 ,-207 ,214 ,-222 ,224 ,-224 ,215 ,-210 ,206 ,-184 ,156 ,-132 ,127 ,-154 ,186 ,-207 ,215 ,-208 ,207 ,-218 ,224 ,-222 ,219 ,-217 ,215 ,-212 ,211 ,-207 ,188 ,-146 ,126 ,-153 ,174 ,-187 ,201 ,-215 ,224 ,-227 ,227 ,-220 ,214 ,-210 ,202 ,-202 ,207 ,-210 ,194 ,-155 ,134 ,-146 ,161 ,-180 ,203 ,-215 ,213 ,-215 ,215 ,-210 ,211 ,-211 ,213 ,-217 ,214 ,-208 ,208 ,-196 ,159 ,-129 ,124 ,-144 ,181 ,-207 ,221 ,-215 ,207 ,-213 ,221 ,-215 ,211 ,-208 ,208 ,-211 ,207 ,-196 ,179 ,-151 ,135 ,-142 ,161 ,-192 ,214 ,-227 ,231 ,-234 ,234 ,-222 ,212 ,-214 ,227 ,-229 ,229 ,-237 ,222 ,-189 ,158 ,-129 ,121 ,-144 ,187 ,-203 ,206 ,-208 ,213 ,-215 ,221 ,-226 ,222 ,-215 ,215 ,-222 ,229 ,-207 ,167 ,-136 ,132 ,-131 ,161 ,-207 ,226 ,-224 ,221 ,-210 ,199 ,-205 ,207 ,-202 ,201 ,-210 ,213 ,-210 ,205 ,-180 ,139 ,-126 ,146 ,-192 ,218 ,-219 ,220 ,-222 ,220 ,-221 ,219 ,-207 ,206 ,-208 ,206 ,-201 ,206 ,-208 ,180,
-137 ,125 ,-154 ,189 ,-207 ,214 ,-215 ,217 ,-221 ,219 ,-221 ,220 ,-215 ,217 ,-221 ,220 ,-212 ,196 ,-177 ,159 ,-142 ,140 ,-166 ,192 ,-207 ,215 ,-217 ,214 ,-215 ,222 ,-210 ,206 ,-211 ,203 ,-196 ,194 ,-196 ,180 ,-142 ,117 ,-126 ,170 ,-202 ,214 ,-222 ,229 ,-218 ,212 ,-210 ,205 ,-207 ,200 ,-192 ,200 ,-207 ,193 ,-168 ,145 ,-121 ,146 ,-199 ,226 ,-224 ,217 ,-210 ,201 ,-205 ,211 ,-205 ,202 ,-202 ,194 ,-187 ,173 ,-148 ,126 ,-112 ,121 ,-156 ,181 ,-194 ,196 ,-194 ,207 ,-213 ,206 ,-194 ,189 ,-199 ,208 ,-205 ,200 ,-194 ,167 ,-130 ,136 ,-152 ,177 ,-210 ,227 ,-222 ,219 ,-221 ,222 ,-231 ,234 ,-231 ,232 ,-226 ,218 ,-210 ,185 ,-152 , };
            //double[] x_1 = {2,-3,4,-5,6,-7,8,-1};

            Complex[] inputs = new Complex[x_1.Length];
            for (int i = 0; i < x_1.Length; i++)
                inputs[i] = new Complex(x_1[i]);
            FFT(inputs);

            Console.ReadKey();
        }


        private static Complex[] FFT(Complex[] inputs)
        {
            int size = inputs.Length;

            Complex[] output = new Complex[size];

            for (int i = 0; i < size; i++)
            {
                output[i] = new Complex();
                for (int j = 0; j < size; j++)
                {
                    double angleTerm = Math.PI * 2 * i * j;
                    double cosineA = Math.Cos(angleTerm / size);
                    double sineA = Math.Sin(angleTerm / size);

                    //output[i].Real += inputs[j].Real * cosineA;
                    //output[i].Image -= inputs[j].Real * sineA;

                    output[i].Real += Math.Abs(inputs[j].Real) * cosineA - inputs[j].Image * sineA;
                    output[i].Image +=Math.Abs(inputs[j].Real) * sineA + inputs[j].Image * cosineA;

                }
                Console.Write(String.Format("({0},{1})\n", output[i].Real, output[i].Image));
            }
            return output;
        }

        //double pi2 = 2.0 * M_PI;
        //double angleTerm,cosineA,sineA;
        //double invs = 1.0 / size;
        //for(unsigned int y = 0;y < size;y++) {
        //output_seq[y] = 0;
        //for(unsigned int x = 0;x < size;x++) {
        //    angleTerm = pi2 * y * x * invs;
        //    cosineA = cos(angleTerm);
        //    sineA = sin(angleTerm);
        //    output_seq[y].real += input_seq[x].real * cosineA - input_seq[x].imag * sineA;
        //    output_seq[y].imag += input_seq[x].real * sineA + input_seq[x].imag * cosineA;
        //}
        //output_seq[y] *= invs;
        //}

        static void factorial()
        {
            double e = 1;
            int i = 1;
            while (1 / GetFactorial(i) > Math.Pow(10, -6))
            {
                e = e + 1 / GetFactorial(i);
                i++;
            }
            Console.WriteLine(e);
            Console.ReadKey();
        }



        static double GetFactorial(int a)
        {
            double result = 1;
            for (int i = 1; i < a + 1; i++)
                result = result * i;
            return result;
        }

        class Complex
        {
            double _real;
            double _image;
            public Complex()
            {
                _real = 0.0;
                _image = 0.0;
            }
            public Complex(double real)
            {
                _real = real;
                _image = 0.0;
            }
            public Complex(double real, double image)
            {
                _real = real;
                _image = image;
            }

            public double Image
            {
                get { return _image; }
                set { _image = value; }
            }
            public double Real
            {
                get { return _real; }
                set { _real = value; }
            }

            public double Magnitude()
            {
                return ((float)Math.Sqrt(_real * _real + _image * _image));
            }
            public double Phase()
            {
                return ((float)Math.Atan(_image / _real));
            }
            public double spectralDensity()
            {
                return _real * _real + _image * _image;
            }
            public void Add(Complex complex)
            {
                _image += complex.Image;
                _real += complex.Real;
            }

            public static void Euler(Complex complex)
            {
                double sin1 = Math.Sin(-1 * complex.Phase());
                double cos1 = Math.Cos(-1 * complex.Phase());

                double sin2 = Math.Sin(2 * complex.Phase());
                double cos2 = Math.Cos(2 * complex.Phase());

                Complex a1 = new Complex(cos1, sin1);
                Complex a2 = new Complex(cos2, sin2);




                //complex<T>(2 * cos1 * a1.real() - a2.real(), 2 * cos1 * a1.imag() - a2.imag());
            }
            private void Euler(int angle)
            {
                _real = Math.Cos(angle);
                _image = Math.Sin(angle);
            }
        }
    }
}
